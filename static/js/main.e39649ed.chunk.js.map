{"version":3,"sources":["components/appHeader/AppHeader.js","resources/gif/spinner.gif","components/spinner/Spinner.js","resources/gif/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","Spinner","src","spinner","alt","ErrorMessage","error","MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","RandomChar","state","loading","marvelService","onError","setState","onCharLoaded","onCharLoading","updateChar","Math","floor","random","then","catch","this","errorMessage","content","onClick","mjolnir","Component","View","imgClass","indexOf","CharList","characters","newItemLoading","charEnded","onCharListLoaded","newCharacters","ended","length","onRequest","onCharListLoading","itemRefs","setRef","ref","push","setClass","key","forEach","item","i","classList","remove","add","arr","imgStyle","props","onCharSelected","style","renderItems","disabled","Skeleton","CharInfo","charId","prevProps","skeleton","ComicsList","comicsList","ErrorBoundary","errorInfo","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e39649ed.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","export default __webpack_public_path__ + \"static/media/spinner.83b5bda2.gif\";","import spinner from '../../resources/gif/spinner.gif';\r\nimport './spinner.scss';\r\nconst Spinner = () => {\r\n    return (\r\n        <img src={spinner} alt='spinner' className='spinner'/>\r\n    )\r\n}\r\n\r\nexport default Spinner;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import error from '../../resources/gif/error.gif';\r\nimport './errorMessage.scss';\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={error} alt='error' className='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","class MarvelService {\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=93aec8f502a9d5e66d216530da84cbfb';\r\n    _baseOffset = 210;\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Произошла ошибка по запросу ${url}, код ошибки ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    }\r\n\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?&${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 150)}...` : 'Отсутствуют данные о данном персонаже в базе данных Marvel API',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default MarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {Component} from 'react';\nimport './randomChar.scss';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nclass RandomChar extends Component {\n    \n    componentDidMount() {\n        this.updateChar();\n    }\n    state = {\n        char : {},\n        loading: true,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n    \n    onCharLoaded = (char) => {\n        this.setState({\n            char,\n            loading: false\n        });\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    updateChar = () => {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(id)\n            .then(this.onCharLoaded)\n            .catch(this.onError);\n    }\n\n    render() {\n        const {char,loading,error} = this.state;\n\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = (!loading && !error) ? <View char={char} /> : null;\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={this.updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst View = ({char}) => {\n    const {name,description,thumbnail,homepage,wiki} = char;\n    let imgClass = '';\n    if (thumbnail.indexOf('image_not_available') !== -1) {\n        imgClass = 'randomchar__img randomchar__img-active';\n    } else {\n        imgClass = 'randomchar__img';\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={imgClass} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React,{Component} from 'react';\nimport PropTypes from 'prop-types';\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './charList.scss';\n\nclass CharList extends Component{\n    \n     \n\n    state = {\n        characters: [],\n        loading: true,\n        error: false,\n        newItemLoading: false,\n        offset: 210,\n        charEnded: false\n    }\n\n    marvelService = new MarvelService();\n    \n    onCharListLoaded = (newCharacters) => {\n        let ended = false;\n        if (newCharacters.length < 9) {\n            ended = true;\n        }\n\n        this.setState(({offset,characters})=> ({\n            characters: [...characters, ...newCharacters],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended\n        }));\n    }\n\n    onRequest = (offset) => {\n        this.onCharListLoading();\n        this.marvelService.getAllCharacters(offset)\n            .then(this.onCharListLoaded)\n            .catch(this.onError)\n    }\n\n    onCharListLoading = () => {\n        this.setState({\n            newItemLoading: true\n        })\n    }\n\n    \n\n    componentDidMount() {\n        this.onRequest();\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n    itemRefs = [];\n\n    setRef = (ref) => {\n        this.itemRefs.push(ref);\n    }\n\n    setClass = (key) => {\n        this.itemRefs.forEach((item,i) => {\n            item.classList.remove('char__item_selected');\n            if (key === i) {\n                item.classList.add('char__item_selected');\n            }\n        })\n    }\n\n    renderItems(arr) {\n\n\n        const items = arr.map((item,i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail.indexOf('image_not_available') !== -1) {\n                imgStyle = {'objectFit' : 'contain'};\n            }\n            return (\n                <li ref={this.setRef} //массив ссылок на элемент записываем в itemRefs\n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => {\n                        this.props.onCharSelected(item.id);\n                        this.setClass(i);\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            );\n        });\n\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    render() {\n        const {characters, loading, error,newItemLoading,offset,charEnded} = this.state;\n        \n        const items = this.renderItems(characters);\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading && error) ? items : null;\n        return (\n            <div className=\"char__list\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <button disabled={newItemLoading} style={{'display': charEnded ? 'none' : 'block'}} onClick={()=>this.onRequest(offset)} className=\"button button__main button__long\">\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport PropTypes from 'prop-types';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport MarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\nimport Skeleton from '../skeleton/Skeleton';\n\nclass CharInfo extends Component{\n\n    state = {\n        char : null,\n        loading: false,\n        error: false\n    }\n\n    marvelService = new MarvelService();\n\n\n    componentDidMount() {\n        this.updateChar();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar();\n        }\n    }\n\n\n    updateChar = () => {\n        const {charId} = this.props;\n        if (!charId) {\n            return;\n        }\n        this.onCharLoading();\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n    }\n\n    onError = () => {\n        this.setState({\n            error: true,\n            loading: false\n        })\n    }\n    \n    onCharLoaded = (char) => {\n        this.setState({\n            char,\n            loading: false\n        });\n    }\n\n    onCharLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    render() {\n        const {char,loading,error} = this.state;\n        const skeleton =  char || loading || error ? null : <Skeleton/>;\n\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = (!loading && !error && char) ? <View char={char} /> : null;\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    }\n}\n\n\n\nconst ComicsList = ({char}) => {\n    const {comics} = char;\n    return (\n        <>\n        {\n            // eslint-disable-next-line\n            comics.map((item,i) => {\n                while (i <= 9) {\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    )\n                }\n            })\n        }\n        </>\n    )\n}\n\nconst View = ({char}) => {\n    const {name,description,thumbnail,wiki,homepage,comics} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail.indexOf('image_not_available') !== -1) {\n    imgStyle = {'objectFit' : 'contain'};\n    }\n    const comicsList = comics.length === 0 ? 'Отсутствуют комиксы c участием данного персонажа в базе данных Marvel API' : <ComicsList char={char} />;\n    return (\n        <>\n        <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsList}\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error,errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from \"react\";\nimport AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\n\nclass App extends Component {\n\n    state = {\n        selectedChar: null\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar/>\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected}/>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './style/style.scss';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}